#pragma once

#include "Entity.h"
#include "../phys/Vec3.h"

class Item;
class Color;
class Random; 
class LookControl;
class MoveControl;
class JumpControl;
class BodyControl;
class PathNavigation;
class Sensing;
class GoalSelector;

class Mob : public Entity {
public:
	const int ATTACK_DURATION = 0x0000000000000005;
	const int SWING_DURATION = 0x0000000000000008;
	int invulnerableDuration;
	bool surfaceMonster;
	float timeOffs;
	float rotA;
	float yBodyRot;
	float yBodyRotO;
	float yHeadRot;
	float yHeadRotO;
	float oAttackAnim;
	float attackAnim;
	int health;
	int lastHealth;
	int hurtTime;
	int hurtDuration;
	float hurtDir;
	int deathTime;
	int attackTime;
	float oTilt;
	float tilt;
	int lookTime;
	float fallTime;
	float walkAnimSpeedO;
	float walkAnimSpeed;
	float walkAnimPos;
	Vec3 aimDirection;
	Random random;
	bool bypassArmor;
	float xxa;
	float yya;
	float yRotA;
	float walkAnimSpeedMultiplier;
	bool swinging;
	int swingTime;
	int noActionTime;
	float defaultLookAngle;
	float flyingSpeed;
	float frictionModifier;
	std::string textureName;
	std::string modelName;
	int deathScore;
	float oRun;
	float run;
	float animStep;
	float animStepO;
	float rotOffs;
	int lSteps;
	float lx;
	float ly;
	float lz;
	float lyr;
	float lxr;
	int lastHurt;
	int dmgSpill;
	float sentX;
	float sentY;
	float sentZ;
	float sentRotX;
	float sentRotY;
	float sentXd;
	float sentYd;
	float sentZd;
	int sentYHeadRot;
	bool allowAlpha;
	bool jumping;
	bool autoSendPosRot;
	unique_ptr<LookControl, std::__1::default_delete<LookControl> > lookControl;
	unique_ptr<MoveControl, std::__1::default_delete<MoveControl> > moveControl;
	unique_ptr<JumpControl, std::__1::default_delete<JumpControl> > jumpControl;
	unique_ptr<BodyControl, std::__1::default_delete<BodyControl> > bodyControl;
	unique_ptr<PathNavigation, std::__1::default_delete<PathNavigation> > navigation;
	unique_ptr<Sensing, std::__1::default_delete<Sensing> > sensing;
	GoalSelector goalSelector;
	GoalSelector targetSelector;
	int targetId;
	int lookingAtId;
	int lastHurtMobId;
	int lastHurtMobTimestamp;
	int lastHurtByMobId;
	int lastHurtByMobTime;
	int ambientSoundTime;
	float speed;
	bool persistent;
public:
	Mob(Level &);
	Mob(TileSource &);
	virtual ~Mob();
	virtual void reset();
	virtual void lerpTo(float, float, float, float, float, int);
	virtual void normalTick();
	virtual void baseTick();
	virtual void rideTick();
	virtual float getHeadHeight();
	virtual bool isPickable();
	virtual bool isPushable();
	virtual bool isShootable();
	virtual bool isSneaking();
	virtual bool isAlive();
	virtual bool isOnFire() const;
	virtual void hurt(Entity *, int);
	virtual void animateHurt();
	virtual void handleEntityEvent(char);
	virtual int getEntityData();
	virtual int getEntityData() const;
	virtual void setSize(float, float);
	virtual void outOfWorld();
	virtual void causeFallDamage(float);
	virtual void readAdditionalSaveData(CompoundTag *);
	virtual void addAdditionalSaveData(CompoundTag *);
	virtual void postInit(void);
	virtual void knockback(Entity *, int, float, float);
	virtual void die(Entity *);
	virtual bool canSee(Entity *);
	virtual void onLadder();
	virtual void spawnAnim();
	virtual void *getTexture(); // TODO return Texture
	virtual bool isSleeping();
	virtual bool isWaterMob();
	virtual void setSneaking(bool);
	virtual float getVoicePitch();
	virtual void playAmbientSound();
	virtual int getAmbientSoundInterval();
	virtual void *getItemInHandIcon(const ItemInstance *, int); // TODO return Icon
	virtual float getBaseSpeed() = 0;
	virtual void superTick();
	virtual void heal(int);
	virtual int getMaxHealth();
	virtual void actuallyHurt(int);
	virtual float getArmorValue();
	virtual void pick(float, float, bool);
	virtual void travel(float, float);
	virtual void updateWalkAnim();
	virtual void aiStep();
	virtual void lookAt(Entity *, float, float);
	virtual bool isLookingAtAnEntity();
	virtual void beforeRemove();
	virtual bool canSpawn();
	virtual void finalizeMobSpawn();
	virtual bool shouldDespawn();
	virtual float getAttackAnim(float);
	virtual bool isBaby();
	virtual bool isTamable();
	virtual Item *getCarriedItem();
	virtual int getUseItemDuration();
	virtual void swing();
	virtual void ate();
	virtual float getMaxHeadXRot();
	virtual Mob *getLastHurtByMob();
	virtual void setLastHurtByMob(Mob *);
	virtual Entity *getLastHurtMob();
	virtual void setLastHurtMob(Entity *);
	virtual Mob *getTarget();
	virtual void setTarget(Mob *);
	virtual bool isAlliedTo(Mob *);
	virtual void doHurtTarget(Entity *);
	virtual bool canBeControlledByRider();
	virtual void teleportTo(float, float, float);
	virtual Color getOverlayColor(float);
	virtual bool removeWhenFarAway();
	virtual Item *getDeathLoot();
	virtual void dropDeathLoot();
	virtual bool isImmobile();
	virtual void jumpFromGround();
	virtual void updateAi();
	virtual void newServerAiStep();
	virtual void serverAiMobStep();
	virtual float getSoundVolume();
	virtual const char *getAmbientSound();
	virtual std::string getHurtSound();
	virtual std::string getDeathSound();
	virtual float getWalkingSpeedModifier();
	virtual void getDamageAfterArmorAbsorb(int);
	virtual void hurtArmor(int);
	virtual bool useNewAi();
	void _init();
	void _ctor();
	bool checkDespawn();
	bool checkDespawn(Mob *);
	void *getMoveControl(); // TODO return
	void *getNavigation(); // TODO Navigation
	bool getSensing();
	bool getSharedFlag(int) const;
	float getSpeed();
	float getYHeadRot();
	bool interpolateOnly();
	void pushEntities();
	void setJumping(bool);
	void setSharedFlag(int, bool);
	void setSpeed(float);
	void setYHeadRot(float);
	void setYya(float);
	void updateMobId(int *);
};
